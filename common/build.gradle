plugins {
    // IDE plugins
    id 'idea'
    id 'eclipse'

    // Gradle java-library plugin
    id 'java-library'

    // Jextract plugin
    id "io.github.krakowski.jextract" version '0.4.0'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(20))
    }
}

group = 'de.hhu.bsinfo'
version = getProperty('projectVersion')

dependencies {

    // Annotations
    implementation "org.jetbrains:annotations:${jetbrainsAnnotationsVersion}"

    // Agrona
    implementation "org.agrona:agrona:${agronaVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
}

jextract {

    header("${project.projectDir}/src/main/resources/linux.h") {

        libraries = [ 'stdc++' ]

        targetPackage = 'org.unix'

        className = 'Linux'

        functions = [

                // Filedescriptor
                'fcntl', 'close', 'read',

                // Printing
                'vsnprintf',

                // Event Filedescriptor
                'eventfd', 'eventfd_read', 'eventfd_write',

                // Timers
                'timerfd_create', 'timerfd_settime', 'timerfd_gettime',

                // Epoll
                'epoll_wait', 'epoll_ctl', 'epoll_create',

                // Error
                '__errno_location', 'strerror',

                // Helper
                'htons', 'ntohs'
        ]

        variables = [

                // Standard I/O
                'stdout', 'stderr', 'stdin'
        ]

        structs = [

                // Epoll
                'epoll_event',

                // Timers
                'timespec', 'itimerspec', 'time_t',

                // Networking
                'sockaddr_storage', 'sockaddr_in', 'sockaddr_in6',
        ]

        constants = [

                // Filedescriptor
                'F_GETFL', 'F_SETFL', 'O_RDONLY', 'O_WRONLY', 'O_RDWR', 'O_CREAT', 'O_EXCL', 'O_NOCTTY', 'O_TRUNC',
                'O_APPEND', 'O_NONBLOCK',

                // Event Filedescriptor
                'EFD_CLOEXEC', 'EFD_NONBLOCK', 'EFD_SEMAPHORE',

                // Timers
                'CLOCK_REALTIME', 'CLOCK_MONOTONIC', 'CLOCK_BOOTTIME',
                'CLOCK_REALTIME_ALARM', 'CLOCK_BOOTTIME_ALARM',
                'TFD_NONBLOCK', 'TFD_CLOEXEC', 'TFD_TIMER_ABSTIME', 'TFD_TIMER_CANCEL_ON_SET',

                // Epoll
                'EPOLLERR', 'EPOLLET', 'EPOLLEXCLUSIVE', 'EPOLLHUP', 'EPOLLIN', 'EPOLLMSG', 'EPOLLONESHOT',
                'EPOLLOUT', 'EPOLLPRI', 'EPOLLWRBAND', 'EPOLLRDBAND', 'EPOLLRDHUP', 'EPOLLWRNORM', 'EPOLLRDNORM',
                'EPOLLWAKEUP',

                'EPOLL_CTL_ADD', 'EPOLL_CTL_MOD', 'EPOLL_CTL_DEL',

                // Networking
                'AF_INET', 'AF_INET6'

        ]
    }
}

test {
    useJUnitPlatform()
}