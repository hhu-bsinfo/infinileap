plugins {
    // Base Plugins
    id 'application'
    id 'idea'

    // Jextract Plugin
    id 'io.github.krakowski.jextract' version '0.3.1'

    // Protobuf plugin
    id "com.google.protobuf" version "0.9.2"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(19))
    }
}

applicationName = 'sidecar'
mainClassName = 'de.hhu.bsinfo.infinileap.benchmark.App'

application.applicationDefaultJvmArgs += [ '--enable-native-access=ALL-UNNAMED' ]

project.startScripts.with {
    doLast {
        // The HotSpot VM uses the SIGSEGV signal for its own purposes,
        // which may interfere with signal handlers installed by the ucx library.
        // Therefore, we turn off signal handlers with this (ugly) hack.
        // Also, we enable the SO_REUSEPORT socket flag so that server applications
        // are able to restart fast after a configuration change.
        unixScript.text = unixScript.text.replaceFirst('exec ', 'UCX_ERROR_SIGNALS="" UCX_TCP_CM_REUSEADDR=y exec ')
    }
}

if (project.hasProperty('installPath')) {
    installDist {
        destinationDir = project.file(project.property('installPath'))
    }
}

jextract.enabled = false

group = 'de.hhu.bsinfo'
version = getProperty('projectVersion')

dependencies {

    // Infinileap
    implementation project(':core')
    implementation project(':engine')
    implementation project(':common')

    // Command Line Application Framework
    implementation "info.picocli:picocli:${picocliVersion}"

    // gRPC
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:${tomcatAnnotationsVersion}"

    // Log4j Logger
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

    // AssertJ
    testImplementation "org.assertj:assertj-core:${assertjVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

test {
    useJUnitPlatform()
}